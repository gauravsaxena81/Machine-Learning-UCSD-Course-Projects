import numpy as np
import math
from numpy import linalg as LA

LAMBDA = 0.01
RUNS=100
MU=0.1
TR = 1
DEL_BETA=0
LCL1=0
LCL2=0

"""
Import data from file to a numpy array
"""
def importdata(m,n,filename):
	matrix = np.zeros((m,n))
	f = open(filename)
	lines=f.readlines()
	f.close()
	for j in range(len(lines)):
		#if j%10==0:
		#	print j
		l=lines[j].strip().split(' ')
		for i in range(len(l)):
			matrix[j][0]=1
			if i == 0:
				if int(l[i]) == 1:
					matrix[j][801]=1
				else:
					matrix[j][801]=0
			else:
				col = int(l[i].split(':')[0])
				val = int(l[i].split(':')[1])
	 			matrix[j][col]=val

	#Normalize everything 
	for i in range(len(matrix)):
	 	matrix[i][:801]=np.divide(matrix[i][:801],LA.norm(matrix[i][:801]))
	return matrix

"""
Save the array to file
"""
def save_to_file(filename,matrix):
	f = file(filename,"wb")
	np.save(f,matrix)
	f.close()

"""
Load array from file
"""
def load_from_file(filename):
	f = file(filename,"rb")
	matrix = np.load(f)
	return matrix

def sigmoid(x):
	#print x
	return 1/(1+math.exp(-x))

def calculate_label(matrix,betas):
	count=0
	for i in range(len(matrix)):
		temp=np.dot(betas,matrix[i][:801])
		if temp==matrix[i][801]:
			count += 1
		#print temp
	#print count

def modify_lambda(n):
	#n is del RLCL
	global LAMBDA
	global TR
	global DEL_BETA

	LAMBDA = abs(DEL_BETA/n)


	# LAMBDA = abs(n)*0.0001
	print LAMBDA
	


	# if abs(n)<TR:
	# 	LAMBDA = LAMBDA*0.2
	# 	TR = float(TR)/5
	# 	print "LAMBDAAAAAAAA"
	# 	print LAMBDA
	# 	print TR

def calculate_differential(matrix,betas):
	global LCL1
	global LCL2
	sum1 = 0
	sum2 = 0
	for i in range(len(matrix)):
		p=np.dot(betas,matrix[i][:801])
		p=sigmoid(p)
		y=matrix[i][801]
		LCL1 = y*math.log(p)+(1-y)*math.log(1-p)
		LCL2 = y*math.log(p)+(1-y)*math.log(1-p)
		for j in range(len(matrix[i][:801])):
			x=matrix[i][j]
			sum1 += (y-p)*x-2*MU*betas[0][j]
			#sum1 is del(RLCL)
			#sum2 is LCL
			

			sum2 += y*math.log(p)+(1-y)*math.log(1-p)
	modify_lambda(sum1)
	return str(sum1)+','+str(sum2)

def main():
	global DEL_BETA
	matrix=importdata(559,802,'train')
	print "Started sorting"
	matrix=matrix[matrix[:,600].argsort()]
	print "Finished sorting"
	#temp=np.ones(1,559)
	save_to_file("array.bin",matrix)
	betas=np.ones((1,801))
	betas[0][:400].fill(0.002)
	betas[0][400:].fill(0.002)
	#Remember to randomize the dataset using random.randint(a,b)
	for runs in range(RUNS):
		#print runs
		DEL_BETA = 0
		for i in range(len(matrix)):
			p=np.dot(betas,matrix[i][:801])
			p=sigmoid(p)
			y=matrix[i][801]
			for j in range(len(matrix[i][:801])):
				x=matrix[i][j]
				DEL_BETA += LAMBDA*(y-p)*x
				betas[0][j] += LAMBDA*((y-p)*x-2*MU*betas[0][j])
		print runs
		print calculate_differential(matrix,betas)
	print betas
	save_to_file("logistic_regression_beta_values_with_regularization_sortedOnY.bin",betas)
	#calculate_label(matrix,betas)

main()
